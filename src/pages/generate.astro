---
import { JSDOM } from "jsdom";
import Root from "../layouts/root.astro";

let article = Astro.url.searchParams.get("article") || "";
if (!article) Astro.redirect("/"); /* ensure we were given URL */

const res = await fetch(article);
const buffer = await res.arrayBuffer();
const dom = new JSDOM(buffer);

const title = dom.window.document
  .querySelector(".entry-title")!
  .innerHTML.trim();

const author = dom.window.document
  .querySelector(".entry-content p:first-of-type")!
  .textContent?.trim()
  .split(": ")[1];

const imageCredits = dom.window.document
  .querySelector(".entry-content p:last-of-type em")!
  .innerHTML.trim()
  .split(": ")[1];

const image = dom.window.document
  .querySelector(`meta[property="og:image"]`)
  ?.getAttribute("content")!;

const date = dom.window.document
  .querySelector(".wp-block-post-date time")
  ?.innerHTML.trim();

const content = [
  ...dom.window.document.querySelectorAll(
    ".entry-content p, .entry-content h2, .entry-content ol, .entry-content ul"
  ),
] as Element[];

const imageURI = await fetch(image)
  .then((res) => res.arrayBuffer())
  .then((buf) => Buffer.from(buf).toString("base64"));
---

<Root>
  <b>Article:</b>
  <code>{article}</code>

  <p><b>Title:</b> {title}</p>
  <p><b>Author:</b> {author}</p>
  <p><b>Image Credits:</b> {imageCredits}</p>

  <b>Image Source:</b>
  <code id="image-source">{image}</code>

  <p><b>Date:</b> {date}</p>
  <br />

  <div class="flex gap-8">
    <div
      class="box-content flex aspect-square w-96 flex-col items-center overflow-hidden bg-white font-news"
      id="title-slide"
    >
      <img src={"data:image/;base64," + imageURI} />
      <div
        class="flex grow flex-col items-center justify-around p-3 text-center leading-none"
      >
        <div>
          <p class="text-balance pb-1 text-2xl font-semibold leading-tight">
            {title}
          </p>
          {author && <p>Article by: {author}</p>}
        </div>
        <img src="/hare-banner.png" class="h-8" />
      </div>
    </div>

    <div
      class="relative box-content flex aspect-square w-96 flex-col overflow-hidden bg-white font-news"
      id="content-slide"
    >
      <div class="absolute top-0 flex flex-col gap-2 p-4">
        {
          author
            ? content.slice(1).map((para) => <p set:html={para.innerHTML} />)
            : content.map((para) => <p set:html={para.innerHTML} />)
        }
      </div>
      <div
        class="pointer-events-none absolute top-0 aspect-square w-96 bg-gradient-to-b from-transparent from-40% to-white to-90%"
      >
      </div>
      <p class="absolute bottom-3 w-full text-center font-bold">
        Full Article in Bio
      </p>
    </div>
  </div>

  <br />

  <button id="title-slide-download">Loading Image Download...</button>
  <br />
  <button id="content-slide-download">Loading Image Download...</button>

  <br />

  <script>
    import { toPng } from "html-to-image";
    import download from "downloadjs";

    const titleSlide = document.getElementById("title-slide")!;
    const contentSlide = document.getElementById("content-slide")!;

    const titleSlideDownload = document.getElementById(
      "title-slide-download"
    ) as HTMLButtonElement;
    const contentSlideDownload = document.getElementById(
      "content-slide-download"
    ) as HTMLButtonElement;

    toPng(titleSlide).then((dataURI) => {
      titleSlideDownload.innerText = "Download Title Slide";
      titleSlideDownload.onclick = () => download(dataURI, "title-slide.png");
    });

    toPng(contentSlide).then((dataURI) => {
      contentSlideDownload.innerText = "Download Content Slide";
      contentSlideDownload.onclick = () =>
        download(dataURI, "content-slide.png");
    });
  </script>
</Root>
