---
import { scrapeArticle } from "~/lib/scrape-article";

const link =
  Astro.url.searchParams.get("article") ||
  "https://theumdhare.com/2025/05/24/whoops-umd-custodial-staff-forgets-to-remove-skeletons-from-last-years-commencement-ceremony/";
const scraped = await scrapeArticle(link);

const articleURI = await fetch(scraped.image)
  .then((res) => res.arrayBuffer())
  .then((buf) => "data:image/;base64," + Buffer.from(buf).toString("base64"));

const logoURI = await fetch("https://hareware.zsrobinson.com/hare-logo.webp")
  .then((res) => res.arrayBuffer())
  .then((buf) => "data:image/;base64," + Buffer.from(buf).toString("base64"));

const WIDTH = 384;
---

<meta charset="utf-8" />
<link
  rel="preload"
  href="/SourceSerif4Variable-Roman.ttf.woff2"
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href="/SourceSerif4Variable-Italic.ttf.woff2"
  as="font"
  type="font/woff2"
  crossorigin
/>

<div style="font-family: Source Serif 4;">.</div>
<style>
  @font-face {
    font-family: "Source Serif 4";
    src: url("/SourceSerif4Variable-Roman.ttf.woff2") format("woff2");
    font-style: normal;
    font-weight: 200 900;
    font-display: swap;
  }

  @font-face {
    font-family: "Source Serif 4";
    src: url("/SourceSerif4Variable-Italic.ttf.woff2") format("woff2");
    font-style: italic;
    font-weight: 200 900;
    font-display: swap;
  }
</style>

<svg id="svg" width={WIDTH} height={WIDTH} xmlns="http://www.w3.org/2000/svg">
  <foreignObject
    x="0"
    y={(9 / 16) * WIDTH}
    width={WIDTH}
    height={WIDTH - (9 / 16) * WIDTH}
  >
    <div class="root">
      <style>
        .root {
          background-color: #5b2118;
          color: white;
          width: 100%;
          height: 100%;

          margin: 0;
          font-weight: normal;
          font-family: serif;
          font-size: 20px;
          line-height: 32px;
        }
        p {
          font-family: "Source Serif 4";
          margin: 0;
          line-height: 1.15;
        }

        .title {
          font-variation-settings: "opsz" 60;
        }

        .bylines {
          display: flex;
          flex-direction: row;
          justify-content: space-around;

          font-size: 14px;
          text-align: center;
        }

        .bylines > div {
          display: flex;
          flex-direction: column;
        }
      </style>

      <p set:html={scraped.title} class="title" />

      <div class="bylines">
        <div>
          <p>Article by</p>
          <p>{scraped.imageCredits}</p>
        </div>
        <div>
          <p>Image by</p>
          <p>{scraped.imageCredits}</p>
        </div>
      </div>
    </div>
  </foreignObject>
</svg>

<img id="outputImage" width={WIDTH} height={WIDTH} />

<script define:vars={{ articleURI, logoURI, WIDTH }}>
  const SCALE = 2;

  // https://stackoverflow.com/a/5438011
  const svg = document.getElementById("svg");
  const canvas = document.createElement("canvas");
  const context = canvas.getContext("2d");
  const outputImage = document.getElementById("outputImage");
  // Ensure canvas matches desired output size
  canvas.width = canvas.height = WIDTH * SCALE;
  context.scale(SCALE, SCALE);

  function loadImage(src) {
    return new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = () => resolve(image);
      image.onerror = (err) => reject(err);
      image.src = src;
    });
  }

  (async () => {
    const svgAsXML = new XMLSerializer().serializeToString(svg);
    const svgURI = "data:image/svg+xml," + encodeURIComponent(svgAsXML);
    const svgLoader = await loadImage(svgURI);
    context.drawImage(svgLoader, 0, 0, WIDTH, WIDTH);

    const articleLoader = await loadImage(articleURI);
    context.drawImage(articleLoader, 0, 0, WIDTH, WIDTH * (9 / 16));

    const logoLoader = await loadImage(logoURI);
    context.drawImage(
      logoLoader,
      WIDTH / 2 - 48 / 2,
      (WIDTH * 7) / 8 - 48 / 2,
      48,
      48,
    );

    outputImage.src = canvas.toDataURL();
  })();
</script>
